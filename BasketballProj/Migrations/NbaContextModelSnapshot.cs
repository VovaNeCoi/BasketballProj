// <auto-generated />
using System;
using BasketballProj.Models.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BasketballProj.Migrations
{
    [DbContext(typeof(NbaContext))]
    partial class NbaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BasketballProj.Models.DB.ActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ActionTypeId");

                    b.ToTable("ActionType", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Admin", b =>
                {
                    b.Property<string>("Jobnumber")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Passwords")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("Jobnumber");

                    b.HasIndex("RoleId");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Conference", b =>
                {
                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ConferenceId");

                    b.ToTable("Conference", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CountryCode");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DivisionId");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Division", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Matchup", b =>
                {
                    b.Property<int>("MatchupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchupId"));

                    b.Property<string>("CurrentQuarter")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("MatchupTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Starttime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TeamAway")
                        .HasColumnType("int")
                        .HasColumnName("Team_Away");

                    b.Property<int>("TeamAwayScore")
                        .HasColumnType("int")
                        .HasColumnName("Team_Away_Score");

                    b.Property<int>("TeamHome")
                        .HasColumnType("int")
                        .HasColumnName("Team_Home");

                    b.Property<int>("TeamHomeScore")
                        .HasColumnType("int")
                        .HasColumnName("Team_Home_Score");

                    b.HasKey("MatchupId")
                        .HasName("PK_Schedule");

                    b.HasIndex("MatchupTypeId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamAway");

                    b.HasIndex("TeamHome");

                    b.ToTable("Matchup", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.MatchupDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchupId")
                        .HasColumnType("int");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<int>("TeamAwayScore")
                        .HasColumnType("int")
                        .HasColumnName("Team_Away_Score");

                    b.Property<int>("TeamHomeScore")
                        .HasColumnType("int")
                        .HasColumnName("Team_Home_Score");

                    b.HasKey("Id");

                    b.HasIndex("MatchupId");

                    b.ToTable("MatchupDetail", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.MatchupLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MatchupId")
                        .HasColumnType("int");

                    b.Property<string>("OccurTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("MatchupId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchupLog", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.MatchupType", b =>
                {
                    b.Property<int>("MatchupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MatchupTypeId")
                        .HasName("PK_ScheduleType");

                    b.ToTable("MatchupType", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Img")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<int>("NumberOfLike")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_PictureInGallery");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("College")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<byte[]>("Img")
                        .HasColumnType("image");

                    b.Property<bool>("IsRetirment")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("JoinYear")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("RetirmentTime")
                        .HasColumnType("date");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("PlayerId");

                    b.HasIndex("CountryCode");

                    b.HasIndex("PositionId");

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.PlayerInTeam", b =>
                {
                    b.Property<int>("PlayerInTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerInTeamId"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("ShirtNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("StarterIndex")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("PlayerInTeamId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerInTeam", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.PlayerStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Assist")
                        .HasColumnType("int");

                    b.Property<int>("Block")
                        .HasColumnType("int");

                    b.Property<int>("Dffr")
                        .HasColumnType("int")
                        .HasColumnName("DFFR");

                    b.Property<int>("FieldGoalMade")
                        .HasColumnType("int");

                    b.Property<int>("FieldGoalMissed")
                        .HasColumnType("int");

                    b.Property<int>("Foul")
                        .HasColumnType("int");

                    b.Property<int>("FreeThrowMade")
                        .HasColumnType("int");

                    b.Property<int>("FreeThrowMissed")
                        .HasColumnType("int");

                    b.Property<int>("IsStarting")
                        .HasColumnType("int");

                    b.Property<int>("MatchupId")
                        .HasColumnType("int");

                    b.Property<decimal>("Min")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("Offr")
                        .HasColumnType("int")
                        .HasColumnName("OFFR");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("Rebound")
                        .HasColumnType("int");

                    b.Property<int>("Steal")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("ThreePointFieldGoalMade")
                        .HasColumnType("int");

                    b.Property<int>("ThreePointFieldGoalMissed")
                        .HasColumnType("int");

                    b.Property<int>("Turnover")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchupId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PositionId");

                    b.ToTable("Position", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.PostSeason", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "SeasonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("PostSeason", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SeasonId");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Abbr")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Coach")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Logo")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("Stadium")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TeamId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Admin", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Admin_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Division", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.Conference", "Conference")
                        .WithMany("Divisions")
                        .HasForeignKey("ConferenceId")
                        .IsRequired()
                        .HasConstraintName("FK_Division_Conference");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Matchup", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.MatchupType", "MatchupType")
                        .WithMany("Matchups")
                        .HasForeignKey("MatchupTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_SeasonType");

                    b.HasOne("BasketballProj.Models.DB.Season", "Season")
                        .WithMany("Matchups")
                        .HasForeignKey("SeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_Matchup_Season");

                    b.HasOne("BasketballProj.Models.DB.Team", "TeamAwayNavigation")
                        .WithMany("MatchupTeamAwayNavigations")
                        .HasForeignKey("TeamAway")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Team");

                    b.HasOne("BasketballProj.Models.DB.Team", "TeamHomeNavigation")
                        .WithMany("MatchupTeamHomeNavigations")
                        .HasForeignKey("TeamHome")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Team1");

                    b.Navigation("MatchupType");

                    b.Navigation("Season");

                    b.Navigation("TeamAwayNavigation");

                    b.Navigation("TeamHomeNavigation");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.MatchupDetail", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.Matchup", "Matchup")
                        .WithMany("MatchupDetails")
                        .HasForeignKey("MatchupId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchupResult_Schedule");

                    b.Navigation("Matchup");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.MatchupLog", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.ActionType", "ActionType")
                        .WithMany("MatchupLogs")
                        .HasForeignKey("ActionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchupLog_ActionType");

                    b.HasOne("BasketballProj.Models.DB.Matchup", "Matchup")
                        .WithMany("MatchupLogs")
                        .HasForeignKey("MatchupId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchupLog_Schedule");

                    b.HasOne("BasketballProj.Models.DB.Player", "Player")
                        .WithMany("MatchupLogs")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchupLog_Player");

                    b.HasOne("BasketballProj.Models.DB.Team", "Team")
                        .WithMany("MatchupLogs")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchupLog_Team");

                    b.Navigation("ActionType");

                    b.Navigation("Matchup");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Player", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.Country", "CountryCodeNavigation")
                        .WithMany("Players")
                        .HasForeignKey("CountryCode")
                        .IsRequired()
                        .HasConstraintName("FK_Player_Country");

                    b.HasOne("BasketballProj.Models.DB.Position", "Position")
                        .WithMany("Players")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_Player_Position");

                    b.Navigation("CountryCodeNavigation");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.PlayerInTeam", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.Player", "Player")
                        .WithMany("PlayerInTeams")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_PlayerInTeam_Player");

                    b.HasOne("BasketballProj.Models.DB.Season", "Season")
                        .WithMany("PlayerInTeams")
                        .HasForeignKey("SeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_PlayerInTeam_Season");

                    b.HasOne("BasketballProj.Models.DB.Team", "Team")
                        .WithMany("PlayerInTeams")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_PlayerInTeam_Team");

                    b.Navigation("Player");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.PlayerStatistic", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.Matchup", "Matchup")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("MatchupId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchupStatistics_Schedule");

                    b.HasOne("BasketballProj.Models.DB.Player", "Player")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchupStatistics_Player");

                    b.HasOne("BasketballProj.Models.DB.Team", "Team")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_MatchupStatistics_Team");

                    b.Navigation("Matchup");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.PostSeason", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.Season", "Season")
                        .WithMany("PostSeasons")
                        .HasForeignKey("SeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamInPostseason_Season");

                    b.HasOne("BasketballProj.Models.DB.Team", "Team")
                        .WithMany("PostSeasons")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamInPostseason_Team");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Team", b =>
                {
                    b.HasOne("BasketballProj.Models.DB.Division", "Division")
                        .WithMany("Teams")
                        .HasForeignKey("DivisionId")
                        .IsRequired()
                        .HasConstraintName("FK_Team_Division");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.ActionType", b =>
                {
                    b.Navigation("MatchupLogs");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Conference", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Country", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Division", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Matchup", b =>
                {
                    b.Navigation("MatchupDetails");

                    b.Navigation("MatchupLogs");

                    b.Navigation("PlayerStatistics");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.MatchupType", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Player", b =>
                {
                    b.Navigation("MatchupLogs");

                    b.Navigation("PlayerInTeams");

                    b.Navigation("PlayerStatistics");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Position", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Role", b =>
                {
                    b.Navigation("Admins");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Season", b =>
                {
                    b.Navigation("Matchups");

                    b.Navigation("PlayerInTeams");

                    b.Navigation("PostSeasons");
                });

            modelBuilder.Entity("BasketballProj.Models.DB.Team", b =>
                {
                    b.Navigation("MatchupLogs");

                    b.Navigation("MatchupTeamAwayNavigations");

                    b.Navigation("MatchupTeamHomeNavigations");

                    b.Navigation("PlayerInTeams");

                    b.Navigation("PlayerStatistics");

                    b.Navigation("PostSeasons");
                });
#pragma warning restore 612, 618
        }
    }
}
